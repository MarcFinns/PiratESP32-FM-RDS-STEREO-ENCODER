/*
 * =====================================================================================
 *
 *                      PiratESP32 - FM RDS STEREO ENCODER
 *                  19 kHz Stereo Pilot Notch Filter Implementation
 *
 * =====================================================================================
 *
 * File:         NotchFilter19k.cpp
 * Description:  Precision notch filter to attenuates audio in the 19 kHz range
 * Purpose:
 *   This module implements a high-Q IIR notch filter that attenuates  audio in the 19 kHz range,
 *   not to intermodulate with the stereo pilot tone, while preserving the audio
 *   passband. The pilot tone is essential for stereo demodulation and audio components in the same
 * range can cause interference and impede stereo decoding, if not properly suppressed
 *
 * Filter Design:
 *   The filter is a second-order biquad IIR notch (all-pass denominator structure),
 *   configured as a narrow, deep notch centered on 19 kHz in the 48 kHz domain:
 *
 *   • Notch center: f₀ = 19 kHz (FM stereo pilot frequency)
 *   • Sample rate: fs = 48 kHz (input audio domain)
 *   • Normalized frequency: fn = f₀ / fs = 19/48 ≈ 0.396 (in [0, 0.5])
 *   • Quality factor: Q ≈ 25 (typical for deep, narrow notch)
 *   • Passband gain: 0 dB (unity DC and high-frequency response)
 *   • Notch depth: ~40–60 dB attenuation at 19 kHz
 *   • Transition width: ~100 Hz (sharp suppression)
 *
 * Biquad IIR Structure:
 *   The notch filter is implemented as a second-order (2-pole, 2-zero) IIR filter:
 *     y[n] = b₀·x[n] + b₁·x[n-1] + b₂·x[n-2] - a₁·y[n-1] - a₂·y[n-2]
 *
 *   Coefficients {b₀, b₁, b₂, a₁, a₂} are generated by ESP-IDF's dsps_biquad_gen_notch_f32,
 *   which uses the normalized frequency and Q to compute the Z-domain transfer function.
 *
 * Pole Radius to Q Mapping:
 *   Users specify filter sharpness via a pole radius parameter (r ∈ [0, 1)):
 *     • r near 1.0: very narrow, deep notch (high Q)
 *     • r near 0.5: moderate notch
 *     • r near 0.0: broad, shallow notch
 *
 *   The relationship is: Q ≈ 1 / (2·(1 - r))
 *   This maps radius intuitively: higher r yields sharper frequency selectivity.
 *
 * Stereo Processing:
 *   Input audio is deinterleaved (L/R channels separated) into contiguous buffers
 *   for efficient SIMD biquad filtering. Each channel maintains independent filter
 *   state (wL_, wR_) to preserve stereo information and avoid cross-talk.
 *
 * ESP32 SIMD Optimization:
 *   The biquad filter loop uses ESP32-S3 dsps_biquad_f32_aes3(), which applies
 *   SIMD instructions for 2–3× speedup compared to scalar cascaded filtering.
 *
 * Causality & Latency:
 *   The biquad filter introduces ~1–2 samples of group delay at 19 kHz. This is
 *   negligible in FM multiplex synthesis (< 50 µs) and does not require phase correction.
 *
 * =====================================================================================
 */

#include "NotchFilter19k.h"

#include <cmath>
#include <cstring>

#include "dsps_biquad.h"
#include "dsps_biquad_gen.h"

// ==================================================================================
//                          CONSTRUCTOR & INITIALIZATION
// ==================================================================================

NotchFilter19k::NotchFilter19k()
{
    reset();
}

// ==================================================================================
//                          FILTER CONFIGURATION
// ==================================================================================

void NotchFilter19k::configure(float fs, float f0, float radius)
{
    /*
     * Configure Notch Filter Parameters
     *
     * Parameters:
     *   fs (float): Sample rate in Hz (typically 48,000 Hz for audio input)
     *   f0 (float): Notch center frequency in Hz (19,000 Hz for stereo pilot)
     *   radius (float): Pole radius in [0, 1), controlling notch sharpness
     *
     * Process:
     *   1. Normalize the notch frequency to [0, 0.5] (Nyquist-relative):
     *      fn = f0 / fs
     *
     *   2. Convert pole radius to quality factor Q:
     *      Q = 1 / (2 · (1 - radius))
     *      Higher radius → higher Q → narrower, deeper notch
     *      Default Q = 25 if radius is out of valid range
     *
     *   3. Generate biquad coefficients using ESP-IDF dsps_biquad_gen_notch_f32():
     *      • Sets up the all-pass denominator structure (zeros on unit circle)
     *      • Ensures unity DC gain (b₀ + b₁ + b₂ = a₀ + a₁ + a₂)
     *      • Achieves ~40–60 dB attenuation at the notch frequency
     *
     *   4. Reset filter state to clear any previous transients
     */

    // Normalize notch frequency to [0, 0.5] (relative to Nyquist)
    float f_norm = f0 / fs;

    /*
     * Map pole radius to quality factor Q
     *
     * The pole radius controls the resonance (sharpness) of the notch:
     *   • radius = 0.99 → Q ≈ 50 (very sharp, deep notch)
     *   • radius = 0.95 → Q ≈ 10 (moderate notch)
     *   • radius = 0.90 → Q ≈ 5 (broad notch)
     *
     * Default Q = 25 provides a sharp, well-defined notch without numerical instability.
     */
    float Q = (radius < 1.0f && radius > 0.0f) ? (1.0f / (2.0f * (1.0f - radius))) : 25.0f;

    // Generate biquad coefficients (b0, b1, b2, a1, a2) for the notch filter
    // Unity DC gain ensures passband is not affected
    dsps_biquad_gen_notch_f32(coef_, f_norm, 1.0f, Q);

    // Clear state to avoid transients on reconfiguration
    reset();
}

// ==================================================================================
//                          FILTER STATE MANAGEMENT
// ==================================================================================

void NotchFilter19k::reset()
{
    /*
     * Reset Filter State
     *
     * Clears both channel delay lines (biquad state variables).
     * This removes any residual transients from previous processing
     * and ensures fresh filtering on the next process() call.
     *
     * Biquad state arrays:
     *   wL_[2]: Left channel delay line state (internal filter memory)
     *   wR_[2]: Right channel delay line state (internal filter memory)
     *
     * Memset to zero initializes Direct Form II transposed state to zero,
     * which means the first output sample may have a brief transient as
     * the state is built up. This is negligible in continuous audio processing.
     */
    std::memset(wL_, 0, sizeof(wL_));
    std::memset(wR_, 0, sizeof(wR_));
}

// ==================================================================================
//                          AUDIO PROCESSING
// ==================================================================================

void NotchFilter19k::process(float* buffer, std::size_t frames)
{
    /*
     * Process Stereo Audio Through Notch Filter
     *
     * Parameters:
     *   buffer (float*): Interleaved stereo audio [L, R, L, R, ...] (in/out)
     *   frames (size_t): Number of stereo frames to process
     *
     * Process Overview:
     *   1. Validate input (buffer pointer and frame count)
     *   2. Deinterleave stereo buffer into separate L/R arrays
     *   3. Apply IIR biquad notch filter to each channel independently (using SIMD)
     *   4. Reinterleave filtered audio back into the output buffer
     *
     * Why Deinterleave?
     *   The ESP-IDF dsps_biquad_f32_aes3() function expects contiguous mono samples
     *   for optimal SIMD vectorization. Deinterleaving allows the function to process
     *   multiple samples with vector instructions, achieving 2–3× speedup over
     *   sample-by-sample scalar filtering.
     */

    if (!buffer || frames == 0)
        return;

    /*
     * Stack-based Deinterleaving Buffers
     *
     * We use fixed-size 64-sample buffers to deinterleave stereo frames:
     *   left[64]:  Contiguous left channel samples
     *   right[64]: Contiguous right channel samples
     *
     * Why 64 samples?
     *   • Typical audio block size is 256–512 samples per callback
     *   • With 48 kHz stereo (interleaved), this is 128–256 frames
     *   • Stack allocation of 2 × 64 × 4 bytes = 512 bytes (well within ESP32 limits)
     *   • Larger buffers waste stack or require dynamic allocation
     *   • Smaller buffers require multiple passes (reduced efficiency)
     *
     * Trade-off: If frames > 64, we employ a conservative fallback (pass-through).
     * This should never happen with typical CONFIG::BLOCK_SIZE settings.
     */
    float left[64];
    float right[64];

    /*
     * Deinterleave Stereo Input
     *
     * Convert from interleaved layout:
     *   buffer: [L₀, R₀, L₁, R₁, L₂, R₂, ...]
     *
     * To separate contiguous arrays:
     *   left:  [L₀, L₁, L₂, ...]
     *   right: [R₀, R₁, R₂, ...]
     *
     * This layout is required by dsps_biquad_f32_aes3() for SIMD processing.
     */
    // Process in chunks of up to 64 frames to avoid large stack buffers
    std::size_t processed = 0;
    while (processed < frames)
    {
        std::size_t chunk = frames - processed;
        if (chunk > 64)
            chunk = 64;

        // Deinterleave current chunk
        for (std::size_t i = 0; i < chunk; ++i)
        {
            std::size_t idx = (processed + i) * 2;
            left[i] = buffer[idx + 0];
            right[i] = buffer[idx + 1];
        }

        // Apply notch filter to chunk
        dsps_biquad_f32_aes3(left, left, (int)chunk, coef_, wL_);
        dsps_biquad_f32_aes3(right, right, (int)chunk, coef_, wR_);

        // Reinterleave filtered chunk back into buffer
        for (std::size_t i = 0; i < chunk; ++i)
        {
            std::size_t idx = (processed + i) * 2;
            buffer[idx + 0] = left[i];
            buffer[idx + 1] = right[i];
        }

        processed += chunk;
    }
}
