/*
 * =====================================================================================
 *
 *                      PiratESP32 - FM RDS STEREO ENCODER
 *                       FM Stereo Multiplex Signal Mixer
 *
 * =====================================================================================
 *
 * File:         MPXMixer.h
 * Description:  Real-time FM multiplex baseband signal construction at 192 kHz
 *
 * Purpose:
 *   This module constructs the complete FM stereo multiplex signal by combining:
 *     • Mono sum (L+R) at 0 kHz with unity gain
 *     • Stereo pilot tone at 19 kHz (typically ±10% amplitude for ARI/RDS compatibility)
 *     • Stereo difference signal (L-R) modulated onto 38 kHz subcarrier (AM-DSB-SC)
 *     • RDS injection (optional, on 57 kHz carrier via DSP_pipeline)
 *
 *   Signal equation:
 *     MPX(t) = (L+R) + A_pilot·cos(2π·19000·t)
 *              + A_diff·(L-R)·cos(2π·38000·t) + RDS
 *
 * Tone Generation:
 *   The mixer accepts pre-computed tone buffers (19 kHz pilot, 38 kHz subcarrier)
 *   generated by external NCO objects. This decoupling allows for:
 *     • Independent phase control and carrier lock
 *     • Coherent subcarrier phase (38 kHz = 2× pilot for exact DSB-SC modulation)
 *     • Flexible tone amplitude scaling
 *
 * Design:
 *   • Deterministic and allocation-free (no dynamic memory)
 *   • Fused accumulation minimizes memory bandwidth
 *   • Sample-wise processing with external tone management
 *
 * Thread Safety:
 *   Not thread-safe. Must be called exclusively from Core 0 audio processing task
 *   at 192 kHz block rate. No shared state with other cores.
 *
 * Processing Rate:
 *   Expects 192 kHz stereo input. One process() call per 192 kHz block.
 *
 * =====================================================================================
 */

#pragma once

#include <cstddef>

#include "Config.h"

class MPXMixer
{
public:
    /** Construct a mixer with pilot and DSB scaling. */
    MPXMixer(float pilot_amp, float diff_amp);

    /** Set pilot tone amplitude at runtime (0.0 to disable). */
    inline void setPilotAmp(float amp) { pilot_amp_ = amp; }

    /** Get current pilot tone amplitude. */
    inline float pilotAmp() const { return pilot_amp_; }

    /**
     * Process one 192 kHz block.
     *
     * @param mono                Contiguous (L+R) buffer [samples]
     * @param diff                Contiguous (L-R) buffer [samples]
     * @param pilot_nco           NCO generating 19 kHz tone
     * @param subcarrier_nco      NCO generating 38 kHz tone
     * @param pilot_buffer        Scratch for pilot tone [samples]
     * @param subcarrier_buffer   Scratch for subcarrier [samples]
     * @param mpx                 Output MPX buffer [samples]
     * @param samples             Number of mono/diff/MPX samples in this block
     */
    void process(const float *mono,
                 const float *diff,
                 const float *pilot_buffer,
                 const float *subcarrier_buffer,
                 float *mpx,
                 std::size_t samples);

private:
    float pilot_amp_;
    float diff_amp_;
};
