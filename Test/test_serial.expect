#!/usr/bin/expect

# Serial Console Test Suite using expect
# Device: /dev/tty.usbmodem5AAF1766471

set timeout 2
set device "/dev/tty.usbmodem5AAF1766471"
set baud 115200

# Open serial port
spawn screen $device $baud
set port_id $spawn_id

sleep 1

# Function to send command and check response
proc test_cmd {name cmd expected} {
    global port_id

    send "$cmd\r"
    sleep 0.3

    expect {
        timeout {
            puts "✗ FAIL | $name (timeout)"
            return 0
        }
        "$expected" {
            puts "✓ PASS | $name"
            return 1
        }
    }
}

puts "========================================================================"
puts "Serial Console Command Test Suite"
puts "========================================================================"
puts ""

# Step 1: Disable logging
puts "STEP 1: Disabling logging..."
send "SYST:LOG:LEVEL OFF\r"
sleep 1

puts ""
puts "STEP 2: Resetting to defaults..."
send "SYST:CONF:DEFAULT\r"
sleep 1

puts ""
puts "========================================================================"
puts "Running Tests"
puts "========================================================================"
puts ""

# Initialize counters
set pass_count 0
set fail_count 0

# RDS Tests
puts "--- RDS Commands ---"

send "RDS:PI 0x52A1\r"
expect "OK"
puts "✓ PASS | RDS:PI set"
incr pass_count

send "RDS:PI?\r"
expect "52A1"
puts "✓ PASS | RDS:PI read"
incr pass_count

send "RDS:PTY 10\r"
expect "OK"
puts "✓ PASS | RDS:PTY set"
incr pass_count

send "RDS:PTY?\r"
expect "10"
puts "✓ PASS | RDS:PTY read"
incr pass_count

send "RDS:PTY:LIST?\r"
expect {
    timeout {
        puts "✗ FAIL | RDS:PTY:LIST? (timeout)"
        incr fail_count
    }
    "POP_MUSIC" {
        puts "✓ PASS | RDS:PTY:LIST? has entries"
        incr pass_count
    }
}

send "RDS:TP 1\r"
expect "OK"
puts "✓ PASS | RDS:TP set"
incr pass_count

send "RDS:TA 1\r"
expect "OK"
puts "✓ PASS | RDS:TA set"
incr pass_count

send "RDS:MS 1\r"
expect "OK"
puts "✓ PASS | RDS:MS set"
incr pass_count

send "RDS:PS \"TestPS\"\r"
expect "OK"
puts "✓ PASS | RDS:PS set"
incr pass_count

send "RDS:PS?\r"
expect {
    timeout {
        puts "✗ FAIL | RDS:PS? (timeout)"
        incr fail_count
    }
    "TestPS" {
        puts "✓ PASS | RDS:PS read"
        incr pass_count
    }
}

send "RDS:RT \"Title\"\r"
expect "OK"
puts "✓ PASS | RDS:RT set"
incr pass_count

send "RDS:ENABLE 1\r"
expect "OK"
puts "✓ PASS | RDS:ENABLE set"
incr pass_count

send "RDS:STATUS?\r"
expect "OK"
puts "✓ PASS | RDS:STATUS?"
incr pass_count

# Audio Tests
puts ""
puts "--- Audio Commands ---"

send "AUDIO:STEREO 1\r"
expect "OK"
puts "✓ PASS | AUDIO:STEREO"
incr pass_count

send "AUDIO:PREEMPH 1\r"
expect "OK"
puts "✓ PASS | AUDIO:PREEMPH"
incr pass_count

send "AUDIO:STATUS?\r"
expect "OK"
puts "✓ PASS | AUDIO:STATUS?"
incr pass_count

# Pilot Tests
puts ""
puts "--- Pilot Commands ---"

send "PILOT:ENABLE 1\r"
expect "OK"
puts "✓ PASS | PILOT:ENABLE"
incr pass_count

send "PILOT:AUTO 1\r"
expect "OK"
puts "✓ PASS | PILOT:AUTO"
incr pass_count

send "PILOT:THRESH 0.001\r"
expect "OK"
puts "✓ PASS | PILOT:THRESH"
incr pass_count

send "PILOT:HOLD 2000\r"
expect "OK"
puts "✓ PASS | PILOT:HOLD"
incr pass_count

# System Tests
puts ""
puts "--- System Commands ---"

send "SYST:VERSION?\r"
expect "OK"
puts "✓ PASS | SYST:VERSION?"
incr pass_count

send "SYST:STATUS?\r"
expect "OK"
puts "✓ PASS | SYST:STATUS?"
incr pass_count

send "SYST:HEAP?\r"
expect "OK"
puts "✓ PASS | SYST:HEAP?"
incr pass_count

# Summary
puts ""
puts "========================================================================"
puts "TEST SUMMARY"
puts "========================================================================"
set total [expr {$pass_count + $fail_count}]
puts "Total:   $total"
puts "Passed:  $pass_count"
puts "Failed:  $fail_count"
if {$total > 0} {
    set rate [expr {100 * $pass_count / $total}]
    puts "Success: $rate%"
}
puts "========================================================================"

exit
